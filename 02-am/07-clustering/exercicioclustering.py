# -*- coding: utf-8 -*-
"""ExercicioDesafio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Hs1Qr01kDDotFwYWPt8wx8NIru4RcOf
"""

# Exercicio desafio
import numpy as np
import urllib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, silhouette_samples
from sklearn import datasets

# Exemplo carrega a base de dados
url = "http://www.ppgia.pucpr.br/~alceu/RAs/dados.txt"
raw_data = urllib.request.urlopen(url)

# Carrega arquivo como uma matriz
dataset = np.loadtxt(raw_data, delimiter=",")

np.random.seed(5)

print("\n Pontos: ")
X = dataset[:,0:2]

print(X)


# Realiza o agrupamento considerando 3 grupos ou clusters
n_clusters=3
cluster=KMeans(n_clusters);
cluster.fit(X)

# Centroids calculados
centroids = cluster.cluster_centers_

print("\n Centroids: ")
print(centroids)

# Calcula o Silhouette_score, o qual nos mostra uma perspectiva da densidade e separacao dos clusters
y = cluster.fit_predict(X)   # define a que grupo pertence cada ponto

silhouette_avg = silhouette_score(X, y)   # calcula o indice silhueta
print("\n\n Indice silhueta:", silhouette_avg, "\n\n")

# Plota o resultado para verificação
print("Grupos e seus centroids")
plt.title("Resultado Agrupamento (K=3)")
plt.xlabel("X")
plt.ylabel("Y")
plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='viridis')
plt.scatter(centroids[:, 0], centroids[:, 1], c='black', s=200, alpha=0.5)
fig = plt.figure(figsize=(10, 10))